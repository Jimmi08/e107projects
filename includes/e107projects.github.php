<?php

/**
 * @file
 * Class for handling Github requests.
 */

// Common functions.
e107_require_once(e_PLUGIN . 'e107projects/includes/e107projects.common.php');
// This file is generated by Composer.
e107_require_once(e_PLUGIN . 'e107projects/vendor/autoload.php');

// TODO - use Redis cache server instead of CachedHttpClient?
// use Cache\Adapter\Redis\RedisCachePool;
use \Github\HttpClient\CachedHttpClient;
use \Github\Client;
use \Github\ResultPager;

/**
 * Class e107projectsGithub.
 */
class e107projectsGithub
{

	/**
	 * Plugin preferences.
	 *
	 * @var
	 */
	private $plugPrefs;

	/**
	 * @var Client
	 */
	private $client;

	/**
	 * @var ResultPager
	 */
	private $paginator;

	/**
	 * Constructor.
	 */
	public function __construct()
	{
		// Get plugin preferences.
		$this->plugPrefs = e107::getPlugConfig('e107projects')->getPref();
		// Get Social plugin config.
		$social_login = e107::getConfig()->get('social_login');

		// Use Client ID + Secret for higher (5000 request/hour) rate limit.
		$client_id = varset($social_login['Github']['keys']['id'], '');
		$secret = varset($social_login['Github']['keys']['secret'], '');

		// Get Cache directory for caching HTTP request in order to decrease number of
		// requests.
		$cache_dir = e107::getInstance()->e107_dirs['CACHE_DIRECTORY'] . 'e107projects';

		// Get Cached HTTP Client.
		$cache = new CachedHttpClient(array(
			'cache_dir' => $cache_dir,
		));

		// Get Github Client with Cached HTTP Client.
		$this->client = new Client($cache);
		// Use Client ID + Secret for higher (5000 request/hour) rate limit.
		$this->client->authenticate($client_id, $secret, Client::AUTH_URL_CLIENT_ID);

		// Use Result Pager.
		$this->paginator = new ResultPager($this->client);
	}

	/**
	 * Get Github username by e107 user ID.
	 *
	 * @param int $user_id
	 *  User ID in e107.
	 *
	 * @return string|boolean
	 */
	public function getGithubUsername($user_id)
	{
		// If no user ID provided, we use current user's ID.
		if($user_id === null)
		{
			$user_id = USERID;
		}

		$db = e107::getDb();
		$tp = e107::getParser();

		// First we try to get user name from database.
		$user = $db->retrieve('e107projects_user', '*', 'user_id = ' . (int) $user_id);
		if(varset($user['user_name'], false))
		{
			return $user['user_name'];
		}

		// If user name is not found in database, we try to request it from Github
		// using Github User ID from XUP.
		$user = e107::user($user_id);
		$userXUP = varset($user['user_xup'], '');
		list($provider, $githubID) = explode('_', $userXUP);

		if($provider != 'Github' || !is_numeric($githubID))
		{
			return false;
		}

		$url = 'https://api.github.com/user/' . $githubID;
		$response = e107projects_http_request($url);

		if(empty($response->error))
		{
			$data = json_decode($response->data);

			// Got it! Save user details to database for later use.
			if(varset($data->login, false))
			{
				$insert = array(
					'data' => array(
						'user_id'   => (int) $user_id,
						'user_gid'  => (int) $data->id,
						'user_name' => $tp->toDB($data->login),
					),
				);

				$db->insert('e107projects_user', $insert, false);

				return $data->login;
			}
		}

		return false;
	}

	/**
	 * Get the repositories of a user.
	 *
	 * @link http://developer.github.com/v3/repos/
	 *
	 * @param string $username
	 *  The username.
	 * @param string $type
	 *  Role in the repository.
	 * @param string $sort
	 *  Sort by.
	 * @param string $direction
	 *  Direction of sort, asc or desc.
	 *
	 * @return array|boolean
	 *  List of the user repositories, or false.
	 */
	public function getUserRepositories($username, $type = 'owner', $sort = 'full_name', $direction = 'asc')
	{
		if(empty($username))
		{
			return false;
		}

		$userAPI = $this->client->api('user');
		return $this->paginator->fetchAll($userAPI, 'repositories', array($username, $type, $sort, $direction));
	}

}
